Grammatica Project Documentation

1. Tech Stack Summary:
- Framework: Next.js 15.3.4
- Language: TypeScript 5.8.3
- UI Library: React 19.0.0, Tailwind CSS 4.1.10, framer-motion, react-icons, lucide-react, @headlessui/react
- State & Hooks: react-firebase-hooks, react-intersection-observer
- Backend & Services: Firebase (firebase 11.9.1, firebase-admin 13.4.0), Vercel integrations (@vercel/analytics 1.5.0, @vercel/kv 3.0.0, @vercel/speed-insights 1.2.0)
- Email: nodemailer 7.0.3, react-email 4.0.16, resend 4.6.0
- 3D & Animation: three.js 0.177.0, @react-three/fiber 9.1.2, @react-three/drei 10.3.0, maath 0.10.8, vanta 0.5.24, motion 12.18.1
- Utilities: js-cookie 3.0.5, @upstash/ratelimit 2.0.5, tsparticles (@tsparticles/react 3.0.0, @tsparticles/slim 3.8.1)
- Icons: @fortawesome/fontawesome-free 6.7.2

2. File Structure and Descriptions:

/app
  /(Admin)
    /admin
      /announcements
        - page.tsx : Admin announcements page
      /users
        - page.tsx : User management page with Firebase integration, filtering, sorting, pagination, and modals for editing user roles and actions.
          Imports:
            - lib/firebase: Firebase app and Firestore db instance.
            - hooks/useUserManagement: Custom hook managing user data fetching, filtering, sorting, and pagination.
            - types/user: User-related TypeScript types.
            - components/admin/ConfirmActionModal: Themed confirmation modal.
            - components/admin/EditUserModal: Modal for editing user roles.
            - components/admin/UserActionsModal: Modal for user status actions.
            - components/admin/UserActionsMenu: Button to open user actions modal.
          Description:
            Implements a user management interface with search, filters by role, grade, and class, sortable columns, and pagination.
            Uses dynamic imports for modals to optimize performance.
            Allows editing user roles and changing user status with confirmation dialogs.
    - page.tsx : Admin dashboard or landing page
    - layout.tsx : Admin layout component

  /(App)
    /Login
      - page.tsx : Login page component
  /(Landing)
    /Components
      - ClientOnly.tsx : Component to render children only on client side.
      - CornerIcon.tsx : Decorative corner icon component.
    - layout.tsx : Landing page layout component
    - page.tsx : Landing page component
  /account-secured
    - page.tsx : Secured account page
  /api
    /auth
      /secure-account
        - route.ts : API route for secure account authentication
      /send-login-notification
        - route.ts : API route to send login notification emails
      /session
        - route.ts : API route for session management
    /feedback
      - route.tsx : API route for feedback submission
  - favicon.ico
  - globals.css
  - layout.tsx : Root layout component

/components
  /admin
    - ConfirmActionModal.tsx : Themed confirmation modal with intents (danger, warning, success, info).
    - DashboardStats.tsx : Admin dashboard statistics component.
    - EditUserModal.tsx : Modal for editing user roles with checkboxes.
    - Sidebar.tsx : Admin sidebar navigation component.
    - UserActionsMenu.tsx : Button with ellipsis icon to open user actions modal.
    - UserActionsModal.tsx : Modal for user actions like edit role, lock, ban, activate.
  /dashboard
    - DynamicDock.tsx : Dashboard dynamic dock component.
    - GoalsWidget.tsx : Widget for goals display.
    - ProfileCard.tsx : User profile card component.
    - ProfileEditorModal.tsx : Modal to edit user profile.
    - QuickAccessWidget.tsx : Quick access widget component.
    - SkillBar.tsx : Skill bar visualization component.
    - StudentSidebar.tsx : Sidebar for student dashboard.
  /landing
    - AnimatedCTAButton.tsx : Animated call-to-action button.
    - ClientNav.tsx : Client-side navigation component.
    - HeroAnimation.tsx : Hero section animation component.
    - LandingFooter.tsx : Footer component for landing page.
    - LandingHelpers.tsx : Helper components for landing page.
    - LandingPageClient.tsx : Client-side landing page component.
    /sections
      - HowItWorksSection.tsx : Section explaining how the app works.
      - TestimonialsSection.tsx : Testimonials section component.
  /modals
    - AvatarModal.tsx : Modal for avatar selection.
    - BadgeModal.tsx : Modal for badge display.
    - MasteryModal.tsx : Modal for mastery details.
    - StatusModal.tsx : Modal for status updates.
    - StreakModal.tsx : Modal for streak information.
  /shared
    - FeedbackButton.tsx : Button to open feedback modal.
    - FeedbackModal.tsx : Modal for submitting feedback.
    - FloatingDustBackground.tsx : Background animation component.
    - InteractiveSpotlightBackground.tsx : Interactive background component.
    - Modal.tsx : Generic modal component.
    - WebVitals.tsx : Web vitals reporting component.
    - WidgetCard.tsx : Widget card component.
  /ui
    - AuroraButton.tsx : Styled button component.
    - GlowingButton.tsx : Glowing button component.
    - PrimaryCTAButton.tsx : Primary call-to-action button.
    - PulseLoader.tsx : Loading spinner animation using framer-motion.

/emails
  - FeedbackEmail.tsx : Email template for feedback emails.

/hooks
  - useDebounce.ts : Custom hook to debounce a value.
  - useKeyPress.ts : Custom hook to detect key presses.
  - useUserManagement.ts : Custom hook to manage user data fetching, filtering, sorting, and pagination.

/lib
  - email-service.ts : Email sending service.
  - firebase-admin.ts : Firebase admin SDK initialization.
  - firebase.ts : Firebase app initialization and exports (app, auth, db).
  - theme.ts : Theme configuration file.

 /public
  /avatars
    - avatar-1.jpg
    - avatar-2.jpg
    - avatar-3.jpg
    - avatar-4.jpg
    - avatar-5.jpg
  - file.svg
  - globe.svg
  - next.svg
  - vercel.svg
  - window.svg

/types
  - user.ts : User-related TypeScript types.

3. Scripts:
- dev: next dev
- build: next build
- start: next start
- lint: next lint

4. Project Configuration Files:
- next.config.ts : Next.js configuration
- tsconfig.json : TypeScript configuration
- postcss.config.mjs : PostCSS configuration
- eslint.config.mjs : ESLint configuration
- vite.config.ts : Vite configuration

5. Summary:
This project is a Next.js app using TypeScript and Tailwind CSS, integrated with Firebase for authentication and Firestore for data storage. It features an admin panel with user management capabilities including role editing and status management. The UI uses framer-motion for animations and react-icons for icons. The project also includes email sending capabilities and various utility hooks and components.

This documentation is intended to help AI systems and developers understand the project structure, dependencies, and file purposes for further development or analysis.